{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isTodayTheLastSunday","isShopSunday","nextSunday","isSunday","moment","day","locale","weekdays","split","document","title","concat","add","endOf","lastSunday","isSame","_this$state","react_default","a","createElement","className","format","renderText","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAMqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,qBAAsBR,EAAKS,eAC3BC,WAAYV,EAAKU,aACjBC,SAA6B,IAAnBC,MAASC,OALJb,oFAUjBY,IAAOE,OAAO,KAAM,CAClBC,SAAW,4EAA6DC,MAAM,OAEhFC,SAASC,MAAT,aAAAC,OAA8BhB,KAAKI,MAAMC,qBAAuB,MAAQ,4CAIxE,OAAOL,KAAKM,eAAiBG,MAASQ,IAAI,EAAG,UAAUC,MAAM,SAASR,IAAI,GAAKD,MAASS,MAAM,SAASR,IAAI,0CAI3G,IAAIS,EAAaV,MACdS,MAAM,SACNR,IAAI,GAGP,OADYD,MACCW,OAAOD,wCAGV,IAAAE,EAC+BrB,KAAKI,MAAxCI,EADIa,EACJb,SAAUH,EADNgB,EACMhB,qBAChB,OAAIG,EACKH,EAAuBiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,QAAyCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,OAGrEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,QAAwChB,MAASiB,OAAO,QAAxD,KACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,yDAMD,IACDlB,EAAeP,KAAKI,MAApBG,WACN,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,wCACCzB,KAAK2B,aACNL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAf,oCAC+B,IAC7BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAclB,EAAWmB,OAAO,cAA/C,cApDuBE,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAAStB,SAASuB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.af392535.chunk.js","sourcesContent":["import \"./App.css\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nimport moment from \"moment\";\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isTodayTheLastSunday: this.isShopSunday(),\r\n      nextSunday: this.nextSunday(),\r\n      isSunday: moment().day() === 0\r\n    };\r\n  }\r\n  \r\n  componentWillMount() {\r\n    moment.locale('pl', {\r\n      weekdays : 'Niedziela_Poniedziałek_Wtorek_Środa_Czwartek_Piątek_Sobota'.split('_'),\r\n    });\r\n    document.title = `Handlowa? ${this.state.isTodayTheLastSunday ? \"TAK\" : \"NIE\"}`\r\n  }\r\n  \r\n  nextSunday(){\r\n    return this.isShopSunday() ? moment().add(1, \"months\").endOf(\"month\").day(0) : moment().endOf(\"month\").day(0)\r\n  }\r\n\r\n  isShopSunday() {\r\n    let lastSunday = moment()\r\n      .endOf(\"month\")\r\n      .day(0);\r\n      \r\n    let today = moment();\r\n    return today.isSame(lastSunday);\r\n  }\r\n\r\n  renderText(){\r\n    let { isSunday, isTodayTheLastSunday } = this.state;\r\n    if (isSunday) {\r\n      return isTodayTheLastSunday ? <div className=\"Text Green\">TAK!</div> : <div className=\"Text Red\">NIE</div>\r\n    }else{\r\n      return (\r\n        <div className=\"NotASunday\">\r\n            <div className=\"NotASunday Green\">Jest {moment().format(\"dddd\")}!</div>\r\n            <div className=\"Subheader Green\">Leć na zakupy!</div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let { nextSunday } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Header\">Czy dzisiaj jest niedziela handlowa?</div>\r\n        {this.renderText()}\r\n        <div className=\"NextSundayWrapper\">\r\n          Następna niedziela handlowa:{\" \"}\r\n          <div className=\"NextSunday\">{nextSunday.format(\"DD-MM-YYYY\")} </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}